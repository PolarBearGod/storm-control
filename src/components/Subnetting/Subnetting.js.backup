import React, { Component } from 'react';
import { Form, FormGroup, FormControl, HelpBlock } from 'react-bootstrap'
import * as subnetInfo from 'subnet-info';

import './Subnetting.css';

export default class Subnetting extends Component {
    constructor(props) {
        super(props);

        this.state = {
            subnet: '',
            mask: ''
        }

        this.handleChangeSubnet = this.handleChangeSubnet.bind(this)
        this.handleChangeMask = this.handleChangeMask.bind(this)
        //this.subnetDetails = this.subnetDetails.bind(this)
    }


    getValidationStateSubnet() {
        if (this.state.subnet === '') return null
        else if (/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/.test(this.state.subnet)) return 'success';
        else return 'error';
    }

    getValidationStateMask() {
        if (this.state.mask === '') return null
        else if (/^([1-9]|[12]\d|3[0-2])$/.test(this.state.mask)) return 'success';
        else return 'error';
    }

    handleChangeSubnet(e) {
        this.setState({ subnet: e.target.value });

    }

    handleChangeMask(e) {
        this.setState({ mask: e.target.value });
    }

    getHosts() {
        if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
            const test = subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            return test.hosts;
        }
    }

    getStartAddress() {
        if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
            const test = subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            return test.startAddress;
        }
    }

    getEndAddress() {
        if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
            const test = subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            return test.endAddress;
        }
    }

    getBroadcastAddress() {
        if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
            const test = subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            return test.broadcastAddress;
        }
    }

    getNetworkAddress() {
        if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
            const test = subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            return test.networkAddress;
        }
    }

    getNetmask() {
        if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
            const test = subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            return test.netMask;
        }
    }

    render() {

        var subnetDetails = () => {
            if ((this.getValidationStateSubnet() === 'success') && (this.getValidationStateMask() === 'success')) {
                return subnetInfo.details(`${this.state.subnet}/${this.state.mask}`);
            }
        }

        //console.log(subnetDetails())

        var details = subnetInfo.details('192.168.10.50/30');
        console.log(details);
        return (
            <div className="subnetting-root-div">
                <h3> Subnet Calculator </h3>

                <Form inline>
                    <FormGroup
                        controlId="formSubnet"
                        validationState={this.getValidationStateSubnet()}
                        >
                        <FormControl
                            type="text"
                            value={this.state.subnet}
                            placeholder="Subnet"
                            onChange={this.handleChangeSubnet}
                            />
                        <FormControl.Feedback />
                        <HelpBlock>Enter a Subnet</HelpBlock>
                    </FormGroup>
                    <span className="subnetting-slash">/</span>

                    <FormGroup
                        controlId="formMask"
                        validationState={this.getValidationStateMask()}
                        >
                        <FormControl
                            type="text"
                            value={this.state.mask}
                            placeholder="Mask"
                            onChange={this.handleChangeMask}
                            />
                        <FormControl.Feedback />
                        <HelpBlock>Enter a Mask (eg 24)</HelpBlock>
                    </FormGroup>


                </Form>
                <div className="subnetting-field-class">
                    <div>
                        <div className="subnetting-field-title"> Netmask </div> <div className="field-value"> {this.getNetmask()} </div>
                    </div>
                    <div>
                        <div className="subnetting-field-title"> Hosts </div> <div className="field-value"> {this.getHosts()} </div>
                    </div>
                    <div>
                        <div className="subnetting-field-title"> Start Address </div> <div className="field-value"> {this.getStartAddress()} </div>
                    </div>
                    <div>
                        <div className="subnetting-field-title"> End Address </div> <div className="field-value"> {this.getEndAddress()} </div>
                    </div>
                    <div>
                        <div className="subnetting-field-title"> Network Address </div> <div className="field-value"> {this.getNetworkAddress()} </div>
                    </div>
                    <div>
                        <div className="subnetting-field-title"> Broadcast Address </div> <div className="field-value"> {this.getBroadcastAddress()} </div>
                    </div>

                </div>
            </div>
        );
    }
}